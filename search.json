[{"title":"Flex布局","url":"/2017/08/14/Flex布局/","content":"** Flex布局：**<Excerpt in index | 首页摘要> \n关于CSS3的Flex布局\n <!-- more -->\n\n网页布局（layout）是 CSS 的一个重点应用。\n![Markdown](http://i2.bvimg.com/567044/e0b376ca4aa2cede.gif)\n<br>\n布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n![Markdown](http://i2.bvimg.com/567044/91b1f521d479a299.png)\n<br>\n2009年，W3C 提出了一种新的方案----Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。\n![Markdown](http://i2.bvimg.com/567044/ac44181fd4541662.jpg)\n<br>\nFlex 布局将成为未来布局的首选方案。本文介绍它的语法，给出常见布局的 Flex 写法。网友 [ JailBreak](http://vgee.cn/)为本文的所有示例制作了 [Demo](http://static.vgee.cn/static/index.html)，也可以参考。\n以下内容主要参考了下面两篇文章：[A Complete Guide to Flexbo](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) 和[A Visual Guide to CSS3 Flexbox Properties。](https://scotch.io/tutorials/a-visual-guide-to-css3 flexbox-properties) \n## **Flex 布局是什么？**\nFlex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n任何一个容器都可以指定为 Flex 布局。\n\n    .box{\n      display: flex;\n    }\n行内元素也可以使用 Flex 布局。\n\n    .box{\n      display: inline-flex;\n    }\nWebkit 内核的浏览器，必须加上**-webkit**前缀。\n\n    .box{\n      display: -webkit-flex; /* Safari */\n      display: flex;\n    }\n注意，设为 Flex 布局以后，子元素的**float**、**clear**和**vertical-align**属性将失效。\n## **基本概念**\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n![Markdown](http://i2.bvimg.com/567044/445b842ca38727fc.png)\n<br>\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做**main start**，结束位置叫做**main end**；交叉轴的开始位置叫做**cross start**，结束位置叫做**cross end**。\n项目默认沿主轴排列。单个项目占据的主轴空间叫做**main size**，占据的交叉轴空间叫做**cross size**。\n\n## **容器的属性**\n以下6个属性设置在容器上。\n\n   - **flex-direction**\n   - **flex-wrap**\n   - **flex-flow**\n   - **justify-content**\n   - **align-items**\n   - **align-conten**\n      <br>\n### flex-direction属性\n**flex-direction**属性决定主轴的方向（即项目的排列方向）。\n \n\n    .box {\n      flex-direction: row | row-reverse |column | column-reverse;\n         }\n\t   \n![Markdown](http://i4.bvimg.com/567044/3a33869f2829c4b1.png)\n 它可能有4个值。    \n \n\n    row（默认值）：主轴为水平方向，起点在左端。\n    row-reverse：主轴为水平方向，起点在右端。   \n    column：主轴为垂直方向，起点在上沿。\n    column-reverse：主轴为垂直方向，起点在下沿。\n\n### flex-wrap属性\n默认情况下，项目都排在一条线（又称\"轴线\"）上。**flex-wrap**属性定义，如果一条轴线排不下，如何换行。\n![Markdown](http://i4.bvimg.com/567044/234cc9972dc23266.png)\n  \n\n    .box{\n      flex-wrap: nowrap | wrap | wrap-reverse;\n        }\n它可能取三个值。\n（1）**nowrap**（默认）：不换行。\n  ![Markdown](http://i1.bvimg.com/567044/347193bcb4a96996.png)\n（2）**wrap**：换行，第一行在上方。\n ![Markdown](http://i1.bvimg.com/567044/8af888a6442517b6.jpg)\n（3）**wrap-reverse**：换行，第一行在下方。\n ![Markdown](http://i1.bvimg.com/567044/60e81a05895277c9.jpg)\n###  **flex-flow**\n**flex-flow**属性是**flex-direction**属性和**flex-wrap**属性的简写形式，默认值为**row nowrap**。\n\n    .box {\n     flex-flow: <flex-direction> || <flex-wrap>;\n         }\n### **justify-content属性**\n**justify-content**属性定义了项目在主轴上的对齐方式。\n\n    .box {\n      justify-content: flex-start | flex-end | center | space-between | space-around;\n         }\n         \n ![Markdown](http://i1.bvimg.com/567044/c6a3eb52960a682a.png)\n 它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\n \n\n    flex-start（默认值）：左对齐\n    flex-end：右对齐\n    center： 居中\n    space-between：两端对齐，项目之间的间隔都相等。   \n    space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n###  **align-items属性**\nalign-items属性定义项目在交叉轴上如何对齐。 \n\n    .box {\n     align-items: flex-start | flex-end | center | baseline | stretch;\n         }\n ![Markdown](http://i4.bvimg.com/567044/35c66f66b23e724c.png)\n \n 它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\n \n    flex-start：交叉轴的起点对齐。\n    flex-end：交叉轴的终点对齐。\n    center：交叉轴的中点对齐。\n    baseline: 项目的第一行文字的基线对齐。 \n    stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n如果属性无效是由于容器高度为0给容器赋予高度即可\n\n    html,\n    body,\n    #flex\n    {\n        height:100%;\n    }\n###  align-content属性\n**align-content**属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n    .box {\n      align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n         }\n         \n ![Markdown](http://i2.bvimg.com/567044/9eb8c177c66d0128.png)\n 该属性可能取6个值。\n\n    flex-start：与交叉轴的起点对齐。\n    flex-end：与交叉轴的终点对齐。\n    center：与交叉轴的中点对齐。\n    space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n    space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n    stretch（默认值）：轴线占满整个交叉轴。\n## 项目的属性\n以下6个属性设置在项目上。\n  \n    order\n    flex-grow\n    flex-shrink\n    flex-basis\n    flex\n    align-self\n  \n### order属性\n**order**属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n    .item {\n      order: <integer>;\n          }\n\n![Markdown](http://i4.bvimg.com/567044/41edc0a70278c44b.png)\n\n###  flex-grow属性\n**flex-grow**属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n    .item {\n      flex-grow: <number>; /* default 0 */\n          }\n![Markdown](http://i4.bvimg.com/567044/1edc015685f43798.png)\n 如果所有项目的**flex-grow**属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的**flex-grow**属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。   \n###  flex-shrink属性 \n**flex-shrink**属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n    .item {\n    flex-shrink: <number>; /* default 1 */\n          }\n![Markdown](http://i4.bvimg.com/567044/e626cd488ee1e216.jpg)\n如果所有项目的**flex-shrink**属性都为1，当空间不足时，都将等比例缩小。如果一个项目的**flex-shrink**属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n###  flex-basis属性\n**flex-basis**属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为**auto**，即项目的本来大小。\n\n    .item {\n    flex-basis: <length> | auto; /* default auto */\n          }\n 它可以设为跟**width**或**height**属性一样的值（比如350px），则项目将占据固定空间。\n###  flex属性\n**flex**属性是**flex-grow**, **flex-shrink** 和 **flex-basis**的简写，默认值为**0 1 auto**。后两个属性可选。\n\n    .item {\n      flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n          }\n该属性有两个快捷值：**auto** (**1 1 auto**) 和 none (**0 0 auto**)。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n### align-self属性\n**align-self**属性允许单个项目有与其他项目不一样的对齐方式，可覆盖**align-items**属性。默认值为**auto**，表示继承父元素的**align-items**属性，如果没有父元素，则等同于**stretch**。\n\n    .item {\n    align-self: auto | flex-start | flex-end | center | baseline | stretch;\n          }\n ![Markdown](http://i4.bvimg.com/567044/34a77529f71ddd92.png)\n 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n \n\n    flex-start：交叉轴的起点对齐。\n    flex-end：交叉轴的终点对齐。\n    center：交叉轴的中点对齐。\n    baseline: 项目的第一行文字的基线对齐。 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n    auto(默认值):表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n## 实例\n常见布局的Flex写法。\n你会看到，不管是什么布局，Flex往往都可以几行命令搞定。\n![Markdown](http://i4.bvimg.com/567044/2a235c4b300ce122.png)\n主要参考资料是[Landon Schropp](https://davidwalsh.name/flexbox-dice)的文章和[Solved by Flexbox](https://philipwalton.github.io/solved-by-flexbox/)。\n\n### 骰子的布局\n骰子的一面，最多可以放置9个点\n![Markdown](http://i4.bvimg.com/567044/e4234dbd41940280.png)\n下面，就来看看Flex如何实现，从1个点到9个点的布局。你可以到[codepen](http://codepen.io/LandonSchropp/pen/KpzzGo)查看Demo。\n![Markdown](http://i4.bvimg.com/567044/afc9fb9c2e0aa807.png)\n如果不加说明，本节的HTML模板一律如下。\n\n     <div class=\"box\">\n     <span class=\"item\"></span>\n     </div>\n    \n上面代码中，div元素（代表骰子的一个面）是Flex容器，span元素（代表一个点）是Flex项目。如果有多个项目，就要添加多个span元素，以此类推。\n#### 单项目\n首先，只有左上角1个点的情况。Flex布局默认就是首行左对齐，所以一行代码就够了。\n![Markdown](http://i4.bvimg.com/567044/77f1362455def59d.png)\n\n    .box {\n      display: flex;\n         }\n设置项目的对齐方式，就能实现居中对齐和右对齐。\n ![Markdown](http://i4.bvimg.com/567044/6985804029f7405a.png)\n \n\n    .box {\n      display: flex;\n      justify-content: center;\n         }\n ![Markdown](http://i4.bvimg.com/567044/c86c2054c3714f18.png)   \n  \n\n    .box {\n      display: flex;\n      justify-content: flex-end;\n         }       \n设置交叉轴对齐方式，可以垂直移动主轴。\n![Markdown](http://i4.bvimg.com/567044/7fca13ef1dbd38bf.png)\n\n    .box {\n      display: flex;\n      align-items: center;\n         }\n![Markdown](http://i4.bvimg.com/567044/b78c7544f5291cb0.png) \n\n    .box {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n         }\n   ![Markdown](http://i4.bvimg.com/567044/9b8040e04d488e93.png)\n  \n\n    .box {\n      display: flex;\n      justify-content: center;\n      align-items: flex-end;\n         }\n ![Markdown](http://i4.bvimg.com/567044/9657e7bb4d45eab9.png)     \n\n    .box {\n      display: flex;\n      justify-content: flex-end;\n      align-items: flex-end;\n         }\n#### 双项目     \n ![Markdown](http://i4.bvimg.com/567044/e44db8e8c1966d96.png)   \n \n\n    .box {\n      display: flex;\n      justify-content: space-between;\n         }\n  ![Markdown](http://i4.bvimg.com/567044/fede26d837167a8b.png)   \n  \n\n    .box {\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n         }\n ![Markdown](http://i4.bvimg.com/567044/11a2616b28e9e4af.png) \n \n\n    .box {\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      align-items: center;\n         }\n ![Markdown](http://i4.bvimg.com/567044/398bb11e64d8c15d.png)\n \n\n    .box {\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      align-items: flex-end;\n         }\n  ![Markdown](http://i4.bvimg.com/567044/66440ccca8b31b53.png)\n  \n\n    .box {\n      display: flex;\n    }\n\n    .item:nth-child(2) {\n      align-self: center;\n    }\n![Markdown](http://i4.bvimg.com/567044/4a2b572c912b4325.png)\n\n    .box {\n      display: flex;\n      justify-content: space-between;\n    }\n    .item:nth-child(2) {\n      align-self: flex-end;\n    }\n#### 三项目\n ![Markdown](http://i4.bvimg.com/567044/ae894b6a162602bb.png)\n \n\n    .box {\n      display: flex;\n    }\n    .item:nth-child(2) {\n      align-self: center;\n    }\n    .item:nth-child(3) {\n      align-self: flex-end;\n    }\n#### 四项目\n ![Markdown](http://i4.bvimg.com/567044/8dc810ef6f2067f8.png)\n \n\n    .box {\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: flex-end;\n      align-content: space-between;\n    }\n ![Markdown](http://i4.bvimg.com/567044/6d26d7bf53eabec0.png)\n **HTML代码如下。**\n \n\n    <div class=\"box\">\n      <div class=\"column\">\n         <span class=\"item\"></span>\n         <span class=\"item\"></span>\n      </div>\n      <div class=\"column\">\n        <span class=\"item\"></span>\n        <span class=\"item\"></span>\n      </div>\n    </div>\n **CSS代码如下。**\n\n    .box {\n      display: flex;\n      flex-wrap: wrap;\n      align-content: space-between;\n    }\n    .column {\n      flex-basis: 100%;\n      display: flex;\n      justify-content: space-between;\n    }\n#### 六项目\n  ![Markdown](http://i4.bvimg.com/567044/4216e60f13269eed.png)\n \n\n    .box {\n      display: flex;\n      flex-wrap: wrap;\n      align-content: space-between;\n    }\n![Markdown](http://i4.bvimg.com/567044/7848dbf06c9e9c13.png)\n\n    .box {\n      display: flex;\n      flex-direction: column;\n      flex-wrap: wrap;\n      align-content: space-between;\n    }\n    \n![Markdown](http://i4.bvimg.com/567044/d0fe571bc1113d77.png)\n\n **HTML代码如下。**\n \n    <div class=\"box\">\n      <div class=\"row\">\n\t    <span class=\"item\"></span>\n\t    <span class=\"item\"></span>\n\t    <span class=\"item\"></span>\n\t  </div>\n\t  <div class=\"row\">\n\t    <span class=\"item\"></span>\n\t  </div>\n\t  <div class=\"row\">\n\t     <span class=\"item\"></span>\n\t     <span class=\"item\"></span>\n\t  </div>\n\t</div>\n**CSS代码如下。**\t\n\n    .box {\n\t  display: flex;\n\t  flex-wrap: wrap;\n\t}\n\n\t.row{\n\t  flex-basis: 100%;\n\t  display:flex;\n\t}\n\n\t.row:nth-child(2){\n\t  justify-content: center;\n\t}\n\n\t.row:nth-child(3){\n\t  justify-content: space-between;\n\t}\n#### 九项目\n![Markdown](http://i4.bvimg.com/567044/9cdaff9d55a50cb3.png)\n\n    .box {\n\t  display: flex;\n\t  flex-wrap: wrap;\n\t}\n### 网格布局\n#### 基本网格布局\n最简单的网格布局，就是平均分布。在容器里面平均分配空间，跟上面的骰子布局很像，但是需要设置项目的自动缩放。\n![Markdown](http://i4.bvimg.com/567044/792b834c71fd6caf.png)\n**HTML代码如下。**\n\n    <div class=\"Grid\">\n\t  <div class=\"Grid-cell\">...</div>\n\t  <div class=\"Grid-cell\">...</div>\n\t  <div class=\"Grid-cell\">...</div>\n\t</div>\n**CSS代码如下。**\n\n    .Grid {\n\t  display: flex;\n\t}\n\t.Grid-cell {\n\t  flex: 1;\n\t}\n#### 百分比布局\n某个网格的宽度为固定的百分比，其余网格平均分配剩余的空间。\n![Markdown](http://i4.bvimg.com/567044/712acd15a1428bdc.png)\n**HTML代码如下。**\n\n    <div class=\"Grid\">\n\t  <div class=\"Grid-cell u-1of4\">...</div>\n\t  <div class=\"Grid-cell\">...</div>\n\t  <div class=\"Grid-cell u-1of3\">...</div>\n\t</div>\n**CSS代码如下。**\n\t\n\n    .Grid {\n\t  display: flex;\n\t}\n\n\t.Grid-cell {\n\t  flex: 1;\n\t}\n\n\t.Grid-cell.u-full {\n\t  flex: 0 0 100%;\n\t}\n\n\t.Grid-cell.u-1of2 {\n\t  flex: 0 0 50%;\n\t}\n\n\t.Grid-cell.u-1of3 {\n\t  flex: 0 0 33.3333%;\n\t}\n\n\t.Grid-cell.u-1of4 {\n\t  flex: 0 0 25%;\n\t}\n### 圣杯布局\n[圣杯布局](https://en.wikipedia.org/wiki/Holy_Grail_%28web_design%29)（Holy Grail Layout）指的是一种最常见的网站布局。页面从上到下，分成三个部分：头部（header），躯干（body），尾部（footer）。其中躯干又水平分成三栏，从左到右为：导航、主栏、副栏。\n![Markdown](http://i4.bvimg.com/567044/c7b70630117085d3.png)\n**HTML代码如下。**\n\n    <body class=\"HolyGrail\">\n\t  <header>...</header>\n\t  <div class=\"HolyGrail-body\">\n\t    <main class=\"HolyGrail-content\">...</main>\n\t    <nav class=\"HolyGrail-nav\">...</nav>\n\t    <aside class=\"HolyGrail-ads\">...</aside>\n\t  </div>\n\t  <footer>...</footer>\n\t</body>\n**CSS代码如下。**\n\n    .HolyGrail {\n\t  display: flex;\n\t  min-height: 100vh;\n\t  flex-direction: column;\n\t}\n\n\theader,\n\tfooter {\n\t  flex: 1;\n\t}\n\n\t.HolyGrail-body {\n\t  display: flex;\n\t  flex: 1;\n\t}\n\n\t.HolyGrail-content {\n\t  flex: 1;\n\t}\n\n\t.HolyGrail-nav, .HolyGrail-ads {\n\t  /* 两个边栏的宽度设为12em */\n\t  flex: 0 0 12em;\n\t}\n\n\t.HolyGrail-nav {\n\t  /* 导航放到最左边 */\n\t  order: -1;\n\t}\n**如果是小屏幕，躯干的三栏自动变为垂直叠加。**\n\n    @media (max-width: 768px) {\n\t  .HolyGrail-body {\n    flex-direction: column;\n    flex: 1;\n\t  }\n\t  .HolyGrail-nav,\n\t  .HolyGrail-ads,\n\t  .HolyGrail-content {\n    flex: auto;\n\t  }\n### 输入框的布局\n我们常常需要在输入框的前方添加提示，后方添加按钮。\n![Markdown](http://i4.bvimg.com/567044/edfdf7e0408bdb63.png)\n**HTML代码如下。**\n\n    <div class=\"InputAddOn\">\n\t  <span class=\"InputAddOn-item\">...</span>\n\t  <input class=\"InputAddOn-field\">\n\t  <button class=\"InputAddOn-item\">...</button>\n\t</div>\n**CSS代码如下。**\n\n    .InputAddOn {\n\t  display: flex;\n\t}\n\n\t.InputAddOn-field {\n\t  flex: 1;\n\t}\n### 悬挂式布局\n有时，主栏的左侧或右侧，需要添加一个图片栏。\n![Markdown](http://i4.bvimg.com/567044/63c4c22dfe0eaeea.png)\n**HTML代码如下。**\n\n    <div class=\"Media\">\n\t  <img class=\"Media-figure\" src=\"\" alt=\"\">\n\t  <p class=\"Media-body\">...</p>\n\t</div>\n**CSS代码如下。**\t\n\n    .Media {\n\t  display: flex;\n\t  align-items: flex-start;\n\t}\n\n\t.Media-figure {\n\t  margin-right: 1em;\n\t}\n\n\t.Media-body {\n\t  flex: 1;\n\t}\n### 固定的底栏\n有时，页面内容太少，无法占满一屏的高度，底栏就会抬高到页面的中间。这时可以采用Flex布局，让底栏总是出现在页面的底部。\n![Markdown](http://i4.bvimg.com/567044/1388411885cc900a.png)\n**HTML代码如下。**\n\n    <body class=\"Site\">\n\t  <header>...</header>\n\t  <main class=\"Site-content\">...</main>\n\t  <footer>...</footer>\n\t</body>\n**CSS代码如下。**\t\n\n    .Site {\n\t  display: flex;\n\t  min-height: 100vh;\n\t  flex-direction: column;\n\t}\n\n\t.Site-content {\n\t  flex: 1;\n\t}\n### 流式布局\n每行的项目数固定，会自动分行。\n![Markdown](http://i4.bvimg.com/567044/b65048a1f45d7f81.png)\n**CSS代码如下。**\t\n\n    .parent {\n\t  width: 200px;\n\t  height: 150px;\n\t  background-color: black;\n\t  display: flex;\n\t  flex-flow: row wrap;\n\t  align-content: flex-start;\n\t}\n\n\t.child {\n\t  box-sizing: border-box;\n\t  background-color: white;\n\t  flex: 0 0 25%;\n\t  height: 50px;\n\t  border: 1px solid red;\n\t}\n\n转载自阮一峰老师\n感谢阮一峰老师的教程\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html \nhttp://www.ruanyifeng.com/blog/2015/07/flex-examples.html","tags":["布局"],"categories":["前端开发"]},{"title":"css3","url":"/2017/08/08/css3/","content":"** CSS3：**<Excerpt in index | 首页摘要> \n <!-- more -->\n## 关于CSS3的新特性\n### CSS3模块的划分\n* 选择器\n* 框模型\n* 背景和边框\n* 文本效果\n* 2D/3D 转换\n* 动画\n* 多列布局\n* 用户界面\n### CSS3边框\n#### 属性<br> **border-radius**<br> **box-shadow**<br> **border-image**\n## border-image(边框)\n### **border-image-source  用在边框的图片的路径。** <br>**border-image-slice\t   图片边框向内偏移。**\t<br>  **border-image-width\t   图片边框的宽度。**\t<br> **border-image-outset   边框图像区域超出边框的量。**\t<br> **border-image-repeat\t图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。**\n## border-radius(圆角)\n### **length 定义圆角的形状。** <br>**%\t以百分比定义圆角的形状。**<br> **具有上下左右四个属性**\n## box-shadow(阴影)\n### **h-shadow 必需。水平阴影的位置。允许负值。**<br>**v-shadow 必需。垂直阴影的位置。允许负值。**<br>**blur 可选。模糊距离。**<br>**spread 可选。阴影的尺寸。**<br>**color 可选。阴影的颜色。请参阅 CSS 颜色值。**<br>**inset 可选。将外部阴影 (outset) 改为内部阴影。**\n### CSS3 背景\n#### 属性<br>**background-size**<br>**background-origin**\n## background-size(图片尺寸)\n### **您能够以像素或百分比规定尺寸。如果以百分比规定尺寸，那么尺寸相对于父元素的宽度和高度。**<br>**length 设置背景图像的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 \"auto\"。**<br>**percentage 以父元素的百分比来设置背景图像的宽度和高度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 \"auto\"。**<br>**cover 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。**<br>**contain\t把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。**\n## background-origin（背景图片的定位区域）\n### **padding-box 背景图像相对于内边距框来定位。** <br>**border-box 背景图像相对于边框盒来定位。**<br>**content-box 背景图像相对于内容框来定位。**\n## CSS3 多重背景图片\n### **background-image:url(bg_flower.gif),url(bg_flower_2.gif);**\n## background-clip(背景的绘制区域)\n### **border-box 背景被裁剪到边框盒。**<br>**padding-box 背景被裁剪到内边距框。**<br>**content-box 背景被裁剪到内容框。**\n### CSS3 文本效果\n#### 属性<br>**text-shadow**<br>**word-wrap**<br>**hanging-punctuation**<br>** punctuation-trim**\n## text-shadow(文字阴影)\n### **h-shadow 必需。水平阴影的位置。允许负值。**<br>**v-shadow 必需。垂直阴影的位置。允许负值。**<br>**blur 可选。模糊的距离。**<br>**color 可选。阴影的颜色。参阅 CSS 颜色值。**\n## word-wrap(对长的不可分割的单词进行分割并换行到下一行。)\n### **normal 只在允许的断字点换行（浏览器保持默认处理）。**<br>**break-word 在长单词或 URL 地址内部进行换行。**\n## hanging-punctuation(标点字符是否位于线框之外。主流浏览器都不支持 hanging-punctuation 属性。)\n### **none 不在文本整行的开头还是结尾的行框之外放置标签符号。**<br>**first 标点附着在首行开始边缘之外。**<br>**last 标点附着在首行结尾边缘之外。**<br>**allow-end\t**<br>**force-end**\n##  punctuation-trim(是否对标点字符进行修剪。目前主流浏览器都不支持 punctuation-trim 属性。)\n### **none 不修剪开启或闭合标点符号。**<br>**start 修剪每行结尾的开启标点符号。**<br>**end 修剪每行结尾的闭合标点符号。**<br>**allow-end****<br>**adjacent**\n","tags":["html"],"categories":["前端开发"]},{"title":"Github常用命令行","url":"/2017/08/07/Github/","content":"** Github：**<Excerpt in index | 首页摘要> \nGithub常用命令行的整理\n <!-- more -->\n## Github常用命令行\n1. > **git init**  初始化\n2. > **git clone** 克隆仓库\n3. > **git add** 添加跟踪\n4. >**git status** 查看跟踪\n5. >**echo \"This is a simple practise\" > readme.txt** 创建文件\n6. >**git commit -m \"This is my first commit via Git!\"** 提交\n7. >**git log** 查看日志\n8. >**git branch** 查看当前有哪些分支\n9. >**git checkout -b feature** 创建一个名为feature的分支\n10. >**git checkout commitId** 回到某一历史版本\n11. >**git checkout master** 回到最新代码\n12. >**git push 或者 git pull** 推送到远程主机\n\n## 修改步骤\n1. >下载新代码：**git pull**。\n2. >从master出捡出一个新的分支：**git checkout -b feature**。feature是分支名称，你可以随意取名，但请用英文。\n3. >在feature分支上随意修改，改完后你可以提交你的修改：**git commit -m \"some message\"**。\n4. >此时要同步代码，请先切回主分支：**git checkout master**，然后更新**git pull**。\n5. >如果想删除自己建立的分支，使用**git branch -D feature**，注意执行此命令后分支被强制删除，无法恢复。","tags":["Github"],"categories":["开发工具"]},{"title":"Bootstrap","url":"/2017/08/07/bootstrap/","content":"** Bootstrap：**<Excerpt in index | 首页摘要> \n关于Bootstrap框架的整理\n <!-- more -->\n\n-------------------\n Bootstrap简介\n-------------------\n1、 **什么是Bootstrap？**\n\tBootstrap是由两位设计开发的。\n\tBootstrap主要是前端的框架(HTML、CSS、JS)。\n\t\n2、 **为什么使用Bootstrap或者Bootstrap有什么样的特点？**\n* 学习比较简单，只要有了HTML、CSS、JS基础，就可以学习。\n* 响应式布局。\n* 移动设备优先。\n\n-------------------\nBootstrap环境安装和下载\n-------------------\n![Markdown](http://i2.bvimg.com/567044/32ee6f6c84161029.png)\n![Markdown](http://i1.bvimg.com/567044/7ca8662959b2ed26.png)\n![Markdown](http://i1.bvimg.com/567044/ec27b009bcea4a57.png)\n**要想使用Bootstrap必须要加载jquery**\n![Markdown](http://i1.bvimg.com/567044/885c01a9ff651b8e.png)\n\n-------------------\nBootstrap基本模板\n-------------------\n1、HTML5文档类型定义\n**Boostrap的文档是基于HTML5的。因此，要使用HTML5的文档类型定义(DTD)。**\n![Markdown](http://i1.bvimg.com/567044/cfc8b58477af3527.png)\n2、字符集设置\n![Markdown](http://i1.bvimg.com/567044/7fe3406d1cdf66b9.png)\n3、移动设备优先\n![Markdown](http://i1.bvimg.com/567044/330b578a96569cb5.png)\n4、引入CSS和JS文件\n![Markdown](http://i1.bvimg.com/567044/30dbee067d6b408d.png)\n![Markdown](http://i1.bvimg.com/567044/b84714d237910109.png)\n\n-------------------\nCSS全局样式\n-------------------\n1、布局容器类样式：.container 和 .container-fluid\n**.container固定宽度并且具有响应式。**\n**.container-fluid自由宽度(100%宽度)。**\n![Markdown](http://i2.bvimg.com/567044/243f1494554eb6d8.png)\n\n 2、标题样式：.h1 ~ .h6 \n **h1……h6样式重写了，基本上做到了兼容性**\n \n 3、行内文本样式：\n **b：加粗**\n**strong加粗**\n**i：斜体**\n**em:斜体，HTML5新标记**\n**del:删除线，HTML5新标记**\n**s:删除线**\n\n4、文本对齐样式：.text-left、.text-center、.text-right、.text-justify\n**.text-left：文本左对齐**\n**.text-right：右对齐**\n**.text-center：居中对齐**\n**.text-justify：两端对齐**\n![Markdown](http://i4.bvimg.com/567044/c477a54b306be5c4.png)\n\n5、列表样式：\n**.list-unstyled(无符号)：去掉前面的符号**\n**.list-inline(行内块)**\n![Markdown](http://i4.bvimg.com/567044/09b5265910ea1735.png)\n![Markdown](http://i4.bvimg.com/567044/d1a9975a269937f3.png)\n\n-------------------\n表格样式\n-------------------\n1、.table ：表格全局样式(少量padding和水平方向的分割线)。\n![Markdown](http://i4.bvimg.com/567044/ed736677794eb58b.png)\n![Markdown](http://i4.bvimg.com/567044/a0765b71077671f1.png)\n\n2、.table-striped：有条纹的背景色行(隔行变色)\n![Markdown](http://i4.bvimg.com/567044/2e8b41ed9e60d7e0.png)\n![Markdown](http://i4.bvimg.com/567044/be591a86fec0afd8.png)\n\n3、.table-bordered：带边框的表格\n![enter image description here](http://i2.bvimg.com/567044/1a5aae8d7773a557.png)\n![enter image description here](http://i2.bvimg.com/567044/2032f383413bc78e.png)\n\n4、.table-hover：鼠标悬停效果(放上变色、离开恢复)\n![Markdown](http://i2.bvimg.com/567044/2d69b935c67fcc4d.png)\n\n5、.table-condensed：紧凑的表格(单元格内补会减半)\n![Markdown](http://i4.bvimg.com/567044/085b3b391650c8f6.png)\n![Markdown](http://i4.bvimg.com/567044/cc30506a90930aa6.png)\n\n6、行或单元格背景色：\n**.active：当前样式**\n**.success**\n**.info**\n**.warning**\n**.Danger**\n![Markdown](http://i4.bvimg.com/567044/fba0b517aa4427e7.png)\n![Markdown](http://i4.bvimg.com/567044/120277e48fa3f5f2.png)\n\n7、响应式表格： \n**将.table元素包裹在.table-responsive元素内，即可创建响应式表格**\n\t**当屏幕宽度小于768px时，表格会出现滚动条。**\n\t**当屏幕宽度大于768px时，表格的滚动条自然消失。**\n![Markdown](http://i4.bvimg.com/567044/9659b2d4fe53f4c8.png)\n![Markdown](http://i4.bvimg.com/567044/bcb50565268c5d18.png)\n\n-------------------\n表单样式\n-------------------\n**.form-group表单组样式：将<label>和表单元素包含其中，可以获得更好的排列**\n**.form-control表单元素样式：常用于input、textarea、select元素**\n\n**Placehoder属性**\n**描述：给input添加提示信息的**\n**说明：这个属性是HTML5新增加的**\n![Markdown](http://i2.bvimg.com/567044/4356adabf4ce1135.png)\n\n**.form-inline内联表单样式(用于form元素)：可以使元素一行排列**\n![Markdown](http://i4.bvimg.com/567044/289950c0706225cb.png)\n![Markdown](http://i2.bvimg.com/567044/b9988699672870e0.png)\n\n**.sr-only：可以用于隐藏元素**\n![Markdown](http://i2.bvimg.com/567044/5e0c94455e386f80.png)\n\n-------------------\n解决IE低版本不支持HTML5元素的方法\n-------------------\n![Markdown](http://i4.bvimg.com/567044/34bae0df895cdb5d.png)\n\n-------------------\n\nCSS全局样式——栅格系统\n-------------------\n1、栅格系统介绍\n**Bootstrap提供了一套响应式、移动设备优先的流式的栅格系统。**\n\t**Bootstrap把一个容器或整个网页平均分成了12列。**\n\t**Bootstrap的栅格系统，由一个行(.row)和多个列构成。**\n\t**栅格系统通过行列的形式来创建网页布局。把具体的数据放入列当中。**\n\t**注意：栅格系统，必须放在.container和.container-fluid之中。**\n\t\n2、栅格系统参数\n![Markdown](http://i4.bvimg.com/567044/e097a4fb5043a811.png)\n![Markdown](http://i4.bvimg.com/567044/ce29a3aaa415c084.png)\n\n3、栅格系统的简单应用\n![Markdown](http://i4.bvimg.com/567044/cdd650dc86a700e8.png)\n![Markdown](http://i4.bvimg.com/567044/67f1b82473d805fa.png)\n**注意：如果列数超出12列，则会自动换行。如果列数低于12列，则无所谓。**\n\n4、列偏移\n**也就是指：一个栏向右偏移多少个列。**\n\t**.col-md-offset-***\n\t**.col-md-offset-2  //指定的栏向右偏移2个列。**\n![Markdown](http://i4.bvimg.com/567044/da505ca21840b640.png)\n\n![Markdown](http://i4.bvimg.com/567044/23482b66c7f5f4c3.png)\n\n5、列嵌套\n**列嵌套：就是在某个栏中，再嵌套一个完整的栅格系统**\n![Markdown](http://i4.bvimg.com/567044/591b44ec4ddd1f83.png)\n\n-------------------\n表单样式\n-------------------\n**.form-group表单组样式：将 label 和表单元素包含其中，可以获得更好的排列。**\n\t**.form-control表单元素样式：常用于input、textarea、select元素。**\n\t**.form-inline内联表单样式(用于form元素)：可以使元素一行排列。**\n\t**.checkbox复选框样式**\n\t**.radio单选框样式**\n\t**.disabled可以禁用单选框或复选项的文本。**\n\t**.form-horizontal水平排列的表单(用于form元素)。**\n\t**.sr-only：可以用于隐藏元素。**\n\t**.checkbox-inline 控制多个复选框元素在同一行显示。**\n    **.radio-inline控制多个单选框元素在同一行显示。**\n   \n------------------- \n按钮样式\n-------------------\n**可作为按钮使用的元素：a、input、button**\n**.btn：按钮的全局样式。input type = “button” class = “btn”**\n**预定义样式：.btn-default、.btn-primary、.btn-success、.btn-info、.btn-warning、.btn-danger、.btn-link**\n**.active按钮激活状态、.disabled按钮禁用状态**\n**按钮尺寸：.btn-lg(大按钮)、.btn-sm(小按钮)、.btn-xs(超小按钮)**\n**.btn-block：将按钮拉伸到撑满整个父元素。**\n\n------------------- \n图片样式\n-------------------\n**.img-responsive：直接为图片添加该样式，可以实现响应式图片。**\n**.center-block：图片居中样式，而不能使用text-center样式。**\n\t**图片形状样式：.img-rounded(圆角图片)、.img-circle(圆形图片)、.img-thumbnail(边框圆角)**\n![Markdown](http://i2.bvimg.com/567044/67841772c1acb39e.png)\n\n------------------- \n辅助类样式\n-------------------\n**文本颜色类：.text-muted(柔和的)、.text-primary、.text-success、.text-info、.text-warning、.text-danger**\n**背景颜色类：.bg-primary、.bg-success、.bg-info、.bg-warning、.bg-danger**\n**三角符号：span class = “caret”**\n**快速浮动类：.pull-left(左浮动)、.pull-right(右浮动)**\n**清除浮动：为父元素添加 .clearfix 可以清除浮动。**\n**让内容块网页居中：div class = “center-block”**\n![Markdown](http://i2.bvimg.com/567044/f3f0614c36971b69.png)\n\n-------------------\n\nCSS组件——下拉菜单\n-------------------\n**.dropdown将下拉菜单触发器和下拉菜单包含在其中(下拉菜单父元素)。**\n**data-toggle属性：下拉菜单触发器。取值为“dropdown”。**\n**.dropdown-menu：给ul指定下拉菜单的样式。**\n**.dropup：向上弹出的下拉菜单(下拉菜单父元素)。**\n**下拉菜单对齐方式：.dropdown-menu-left和.dropdown-menu-right**\n**.divider：为下拉菜单添加分隔线，用于将多个链接分组。**\n**.disabled：禁用的菜单项。**\n![Markdown](http://i2.bvimg.com/567044/0e78093649ae22f2.png)\n\n-------------------\nCSS组件——按钮组\n-------------------\n**.btn-group：按钮组(可以实现将一组按钮放在同一行)。**\n**.btn-toolbar：按钮组工具栏(将多个按钮组放在其中)。**\n**按钮组的尺寸：.btn-group-lg、.btn-group-sm、.btn-group-xs**\n**.btn-group-vertical：垂直排列的按钮组。**\n![Markdown](http://i2.bvimg.com/567044/e3c1187ed81f384d.png)\n\n-------------------\n\nCSS组件——按钮式下拉菜单\n-------------------\n**单按钮下拉菜单**\n**分裂式按钮下拉菜单**\n![Markdown](http://i4.bvimg.com/567044/b0a611cf04da0e2b.png)\n\n-------------------\nCSS组件——输入框组\n-------------------\n**.input-group：只能用于文本框input，不能用于select和textarea。**\n\t**.input-group-addon用于在input前后添加额外元素，赋给一个span元素即可。**\n\t**注意：将.input-group-addon和input元素包在.input-group之中。**\n\t**.input-group-lg 和 .input-group-sm 可以改变输入框组的尺寸。**\n\t**.input-group-btn可以作为额外元素的按钮，应该是作为button的父元素。**\n![Markdown](http://i4.bvimg.com/567044/8aaba1d67bdcc89f.png)\n\n-------------------\nCSS组件——标签页(选项卡)\n-------------------\n**.nav是标签页的基类**\n\t**.nav-tabs是标签页类样式**\n\t**.active是标签页的状态类(当前样式)**\n\t**.nav-pills胶囊式标签页**\n\t**.nav-stacked胶囊式标签页堆放排列(垂直排列)**\n![Markdown](http://i4.bvimg.com/567044/a0ca0b4fcc6462d5.png)\n\n-------------------\nCSS组件——导航条\n-------------------\n**.navbar：导航栏的基类，用于 nav 元素。**\n**.navbar-default：导航栏默认样式，用于 nav 元素。**\n**.container是 nav 的子元素。导航栏内容都放入其中。**\n  **.navbar-header：导航栏头部样式。**\n\t**.navbar-brand：设置品牌图标样式**\n\t**.collapse是折叠导航栏的样式的基类。**\n\t**.navbar-collapse是折叠导航栏样式。**\n\t**.nav是导航栏的链接基类。**\n\t**.navbar-nav是导航栏的链接样式。**\n\t**.navbar-from：导航栏表单，可以使表单元素排在同一行。**\n\t**.navbar-left 或 .navbar-right ：组件排列。导航链接、表单、按钮或文本对齐。**\n\t**.navbar-btn：对于不在 form 中的 button 元素，实现垂直对齐。**\n\t**.navbar-text：对于导航栏的普通文本有了行距和颜色，通常用于p元素。**\n\t**.navbar-fixed-top：导航栏固定在顶部，用于 nav 元素。需要为 body 设置padding-top:70px**\n\t**.navbar-fixed-bottom：导航栏固定在底部，用于 nav 元素。需要为 body 设置padding-bottom:70px;**\n\t**.navbar-static-top：导航栏静止在顶部，用于 nav 元素。会随着滚动条移动而消失。**\n**.navbar-inverse：可以实现反色导航栏，用于 nav 元素。**\n\n-------------------\nCSS组件——路径导航\n-------------------\n**.breadcrumb：赋给 ol 可以实现面包屑效果。**\n**.active赋给当前栏目，当前栏目不加链接。**\n![Markdown](http://i2.bvimg.com/567044/6f831bb6174278c8.png)\n\n-------------------\n\nCSS组件——缩略图\n-------------------\n.thumbnail赋给 a 元素，可以实现缩略图样式。\n.caption 可以实现缩略图标题及描述\n![Markdown](http://i2.bvimg.com/567044/fa84af24364ea5a4.png)\n\n-------------------\n\nCSS组件——分页\n-------------------\n**.pagination赋给 ul 元素可以实现分页效果**\n**& laquo; 上一页**\n**& raquo; 下一页**\n**.disabled禁用状态**\n**.active激活状态**\n**.pagination-lg分页大尺寸**\n**.pagination-sm分页小尺寸**\n**.pager可以实现翻页效果。上一页、下一页效果。**\n![Markdown](http://i2.bvimg.com/567044/909286c8a56b21c1.png)\n\n-------------------","tags":["Bootstrap"],"categories":["前端开发"]}]